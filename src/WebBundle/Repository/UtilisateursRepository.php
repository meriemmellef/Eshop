<?php

namespace WebBundle\Repository;

/**
 * UtilisateursRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UtilisateursRepository extends \Doctrine\ORM\EntityRepository
{


    public function getGerantByStation($station)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles')
            ->andWhere('u.enabled = true')
            ->andWhere('u.station = :station')
            ->setParameter('roles', '%ROLE_GERANT%')
            ->setParameter('station', $station)
            ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();

    }

    public function findAllGestionnaire($email)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles')
            ->andWhere('u.enabled = true')
            ->setParameter('roles', '%ROLE_GESTIONNAIRE%')
            ->orderBy('u.id','DESC');

        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }
        return $query->getQuery()->getResult();

    }

    public function getClientByPays($idPays, $email)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('(u.roles LIKE :roles or u.roles LIKE :roles1 ) and u.enabled = true and p.id = :idPays')
            ->setParameter('roles', '%a:0:{}%')
            ->setParameter('roles1', '%ROLE_CLIENT%')
            ->setParameter('idPays', $idPays);
        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }
        return $query->getQuery()->getResult();

    }

    public function getClientByRole($email)
    {
        $query = $this->createQueryBuilder('u')
            ->where('(u.roles LIKE :roles or u.roles LIKE :roles1 ) and u.enabled = true ')
            ->setParameter('roles', '%a:0:{}%')
            ->setParameter('roles1', '%ROLE_CLIENT%');
        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }
        return $query->getQuery()->getResult();

    }


    public function getClientByRoleAndPays($email, $pays,$station)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.station", "s")
            ->where('(u.roles LIKE :roles or u.roles LIKE :roles1 )and u.enabled = true ')
            ->andWhere("u.pays = :pays")
            ->setParameter('roles', '%a:0:{}%')
            ->setParameter('roles1', '%ROLE_CLIENT%')
            ->setParameter("pays",$pays);
        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }

        if ($station != "") {
            $query->andWhere(' s = :station')
                ->setParameter('station', $station);

        }
        return $query->getQuery()->getResult();

    }

    public function getClientByStation($station, $email)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.station", "s")
            ->where('(u.roles LIKE :roles or u.roles LIKE :roles1 ) and u.enabled = true and s = :station')
            ->setParameter('roles1', '%a:0:{}%')
            ->setParameter('roles', '%ROLE_CLIENT%')
            ->setParameter('station', $station);
        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }
        return $query->getQuery()->getResult();

    }


    public function getClientByPaysStation($idPays, $email,$station)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.station", "s")
            ->where('(u.roles LIKE :roles or u.roles LIKE :roles1 )and u.enabled = true ')
            ->andWhere("u.pays = :pays")
            ->setParameter('roles', '%a:0:{}%')
            ->setParameter('roles1', '%ROLE_CLIENT%')
            ->setParameter("pays",$idPays);

        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }

        if ($station != "") {
            $query->andWhere(' s = :station')
                ->setParameter('station', $station);

        }
        return $query->getQuery()->getResult();

    }

    public function getGerantByPays($idPays, $email)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles and u.enabled = true and p.id = :idPays')
            ->setParameter('roles', '%ROLE_GERANT%')
            ->setParameter('idPays', $idPays);
        if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }
        return $query->getQuery()->getResult();

    }

    public function getGestionnaireByPays($idPays)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles and u.enabled = true and p.id = :idPays')
            ->setParameter('roles', '%ROLE_GESTIONNAIRE%')
            ->setParameter('idPays', $idPays)
            ->setMaxResults(1);
        ;
       /* if ($email != "") {
            $query->andWhere('u.email LIKE :email')
                ->setParameter('email', '%' . $email . '%');

        }*/
        return $query->getQuery()->getOneOrNullResult();

    }

    public function getGestionnairesPays($idPays)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles and u.enabled = true and p.id = :idPays')
            ->setParameter('roles', '%ROLE_GESTIONNAIRE%')
            ->setParameter('idPays', $idPays)
           //was ->setMaxResults(1);
        ;
        /* if ($email != "") {
             $query->andWhere('u.email LIKE :email')
                 ->setParameter('email', '%' . $email . '%');

         }*/
        return $query->getQuery()->getResult();

    }



    public function getAllGerantByStation($station)
    {
        $query = $this->createQueryBuilder('u')
            ->leftJoin("u.pays", "p")
            ->where('u.roles LIKE :roles')
            ->andWhere('u.enabled = true')
            ->andWhere('u.station = :station')
            ->setParameter('roles', '%ROLE_GERANT%')
            ->setParameter('station', $station);
           // ->setMaxResults(1);

        return $query->getQuery()->getResult();

    }

    /**
     * @return Array
     */
    public function findListAffecation()
    {
        return $this->getEntityManager()->createQuery('
                SELECT r, d
                FROM WebBundle:Region r
                LEFT JOIN r.delegations d         
            ')
            ->getResult();
    }


    public function findList()
    {
        return $this->getEntityManager()->createQuery('
                SELECT u
                FROM WebBundle:Utilisateurs u      
            ')
            ->getFirstResult();
    }

}
