<?php

namespace WebBundle\Repository;

/**
 * UtilisateursAdressesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeProduitRepository extends \Doctrine\ORM\EntityRepository
{
    public function GetCommandeByPays($pays,$reference,$client,$statutcommande,$statutpayement,$remboursement,$periode,$start,$end,$station)
    {

        $em = $this->getEntityManager(); //on appelle Doctrine
        $query=$this->createQueryBuilder('cp')
            ->addSelect('c as commande ,count(p) as nbproduit,s,u')
            ->leftJoin("cp.commande", "c")
            ->leftJoin("c.pays", "py")
            ->leftJoin("cp.produit", "p")
            ->leftJoin("c.utilisateur", "u")
            ->leftJoin("c.station", "s")
            ->where('py = :pays')
            ->andWhere('c.valider = true')
            ->setParameter('pays', $pays)
            ->groupBy('commande')
            ->orderBy('c.id','DESC');



        if($reference !=""){
            $query  ->andWhere('c.reference like :reference')
                ->setParameter('reference', '%'.$reference.'%');
        }
        if($client !=""){
            $query  ->andWhere('u.firstName like :client or u.lastName like :client ')
                ->setParameter('client', '%'.$client.'%');
        }
        if($station !=""){
            $query  ->andWhere('s.id = :station ')
                ->setParameter('station', $station);
        }
        if($statutcommande !=""){
            $query  ->andWhere('c.statutcommande = :statutcommande')
                ->setParameter('statutcommande', $statutcommande);
        }
        if($statutpayement !=""){
            $query  ->andWhere('c.statutpayement = :statutpayement')
                ->setParameter('statutpayement', $statutpayement);
        }
        if($remboursement !=""){
            $query  ->andWhere('c.remboursement = :remboursement')
                ->setParameter('remboursement', $remboursement);
        }
        if($periode !=""){
            $query  ->andWhere('c.periode_reception = :periode')
                ->setParameter('periode', $periode);
        }
        if(($start !="") and ($end !="")){
            $datestart = new \DateTime($start);
            $dateend = new \DateTime($end);
            $query   ->andWhere('c.date_reservation  Between :start and :end ')
                ->setParameter('start', $datestart->format('Y-m-d 00:00:00'))
                ->setParameter('end', $dateend->format('Y-m-d 23:59:59'));
        }
        return $query->getQuery()->getResult();
    }
    public function GetCommandeByStation($station,$reference,$client,$statutcommande,$statutpayement,$remboursement,$periode,$start,$end)
    {

        $em = $this->getEntityManager(); //on appelle Doctrine
        $query=$this->createQueryBuilder('cp')
            ->addSelect('c as commande ,count(p) as nbproduit')
            ->leftJoin("cp.commande", "c")
            ->leftJoin("c.station", "s")
            ->leftJoin("cp.produit", "p")
            ->leftJoin("c.utilisateur", "u")
            ->where('s = :station')
            ->andWhere('c.valider = true')
            ->setParameter('station', $station)
            ->groupBy('commande')
            ->orderBy('c.id','DESC');


        if($reference !=""){
            $query  ->andWhere('c.reference like :reference')
                ->setParameter('reference', '%'.$reference.'%');
        }
        if($client !=""){
            $query  ->andWhere('u.firstName like :client or u.lastName like :client ')
                ->setParameter('client', '%'.$client.'%');
        }
        if($statutcommande !=""){
            $query  ->andWhere('c.statutcommande = :statutcommande')
                ->setParameter('statutcommande', $statutcommande);

        }
        if($statutpayement !=""){
            $query  ->andWhere('c.statutpayement = :statutpayement')
                ->setParameter('statutpayement', $statutpayement);

        }
        if($remboursement !=""){
            $query  ->andWhere('c.remboursement = :remboursement')
                ->setParameter('remboursement', $remboursement);
        }
        if($periode !=""){
            $query  ->andWhere('c.periode_reception = :periode')
                ->setParameter('periode', $periode);
        }
        if(($start !="") and ($end !="")){
            $datestart = new \DateTime($start);
            $dateend = new \DateTime($end);
            $query   ->andWhere('c.date_reservation  Between :start and :end ')
                ->setParameter('start', $datestart->format('Y-m-d 00:00:00'))
                ->setParameter('end', $dateend->format('Y-m-d 23:59:59'));
        }

        return $query->getQuery()->getResult();
    }
    public function GetProduitByCommande($commande)
    {
        $em = $this->getEntityManager();
        $query=$this->createQueryBuilder('cp')
            ->addSelect('cp,c,p,cl,s,sp')
            ->leftJoin("cp.commande", "c")
            ->leftJoin("c.pays", "py")
            ->leftJoin("cp.produit", "p")
            ->leftJoin("p.couleurs", "cl")
            ->leftJoin("cl.sizes", "s")
            ->leftJoin("p.sizes", "sp")
            ->where('c.id = :commande')
            ->andWhere('c.valider = true')
            ->setParameter('commande', $commande->getId());

        return $query->getQuery()->getResult();
    }
    public function GetProduitByCommandeInvalid($commande)
    {
        $em = $this->getEntityManager();
        $query=$this->createQueryBuilder('cp')
            ->addSelect('cp,c,p,cl,s,sp')
            ->leftJoin("cp.commande", "c")
            ->leftJoin("c.pays", "py")
            ->leftJoin("cp.produit", "p")
            ->leftJoin("p.couleurs", "cl")
            ->leftJoin("cl.sizes", "s")
            ->leftJoin("p.sizes", "sp")
            ->where('c.id = :commande')
            ->andWhere('c.valider = false')
            ->setParameter('commande', $commande->getId());

        return $query->getQuery()->getResult();
    }
    public function getCommandeByUser($user)
    {

        $em = $this->getEntityManager(); //on appelle Doctrine
        $query=$this->createQueryBuilder('cp')
          //  ->addSelect('c as commande ,count(p) as nbproduit')
            ->leftJoin("cp.commande", "c")
            ->leftJoin("c.station", "s")
            ->leftJoin("cp.produit", "p")
            ->leftJoin("c.utilisateur", "u")
            ->where('u = :user')
            ->andWhere('c.valider = true')
            ->setParameter('user', $user);
           // ->distinct('c.id')
           // ->groupBy('c.id');




        return $query->getQuery()->getResult();
    }

}
