<?php

namespace WebBundle\Repository;

/**
 * ProduitsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitsRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAllCategories($code_pays, $station)
    {
        $q = $this->createQueryBuilder('pr')
            ->select("c,COUNT(pr) AS number_of_products")
            ->from('categorie c')
            ->leftJoin("pr.sous_categorie", "sub")
            ->leftJoin("pr.pays", "p")
            ->leftJoin("pr.station", "s")
            ->where('p.code = :pays')
            ->andWhere('c.isActive = true')
            ->andWhere('pr.is_active = true')
            ->groupBy('c')
            ->setParameter('pays', $code_pays);
        if ($station != "") {
            $q->andWhere('s.id = :station_id')
                ->setParameter('station_id', $station);
        }
        return $q->getQuery()->getResult();

    }

    public function getAllSousCategorie($code_pays)
    {
        $q = $this->createQueryBuilder('pr')
            ->select("sub, pr,COUNT(pr) AS number_of_products")
            ->leftJoin("pr.sous_categorie", "sub")
            ->leftJoin("pr.pays", "p")
            ->leftJoin("pr.categorie", "c")
            ->where('p.code = :pays')
            ->andWhere('c.isActive = true')
            ->andWhere('pr.is_active = true')
            ->groupBy('sub')
            ->setParameter('pays', $code_pays);

        return $q->getQuery()->getResult();

    }

    public function getProduitByPa($pays)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,c,sc,s,py')
            ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")
            ->where('p.pays = :pays')
            ->andWhere('sc.isActive = true')
            ->andWhere('c.isActive = true')
            //  ->andWhere("p.is_active  = true")

            ->andWhere('s.isDeleted = false')
            ->setParameter('pays', $pays)
            ->orderBy('p.id', 'DESC');


        return $q->getQuery()->getArrayResult();
    }

    public function getProduitByPays($pays, $search, $categorie, $souscategorie, $station)
    {
        $q = $this->createQueryBuilder('p')
            //  ->select('p,c,sc,s,py')
            ->select('p,c,sc,py')
            ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")
            ->where('p.pays = :pays')
            ->andWhere('sc.isActive = true')
            ->andWhere('c.isActive = true')
            ->andWhere('p.station IS NULL')
            //  ->andWhere("p.is_active  = true")
            //   ->andWhere('s.isDeleted = false')
            ->setParameter('pays', $pays)
            ->orderBy('p.id', 'DESC');

        if ($search != "") {
            $q->andWhere('p.nom like :search')
                ->setParameter('search', '%' . $search . '%');
        }

        if ($categorie != "") {
            $q->andWhere('c.id = :categorie_id')
                ->setParameter('categorie_id', $categorie);
        }
        if ($souscategorie != "") {
            $q->andWhere('sc.id = :souscategorie_id')
                ->setParameter('souscategorie_id', $souscategorie);
        }


        /*  if($station !=""){
             $q  ->andWhere('s.id = :station_id')
                 ->setParameter('station_id', $station);
         }*/


        return $q->getQuery()->getArrayResult();
    }

    public function getProduitByPaysStation($pays, $search, $categorie, $souscategorie, $station)
    {
        $q = $this->createQueryBuilder('p')
            //  ->select('p,c,sc,s,py')
            ->select('p,c,sc,py,s')
            ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")
            ->where('p.pays = :pays')
            // ->andWhere('sc.isActive = true')
            //  ->andWhere('c.isActive = true')
            // ->andWhere('p.station IS NULL')
            //  ->andWhere("p.is_active  = true")
            //   ->andWhere('s.isDeleted = false')
            ->setParameter('pays', $pays)
            ->orderBy('p.id', 'DESC');

        if ($search != "") {
            $q->andWhere('p.nom like :search')
                ->setParameter('search', '%' . $search . '%');
        }

        if ($categorie != "") {
            $q->andWhere('c.id = :categorie_id')
                ->setParameter('categorie_id', $categorie);
        }
        if ($souscategorie != "") {
            $q->andWhere('sc.id = :souscategorie_id')
                ->setParameter('souscategorie_id', $souscategorie);
        }

        if ($station != "") {
            $q->andWhere('s.id = :station_id')
                ->setParameter('station_id', $station);
        }

        return $q->getQuery()->getArrayResult();
    }

    public function getProduitByStation($station, $search, $categorie, $souscategorie)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,c,sc,s,py')
            ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")
            ->where('p.station = :station')
            ->andWhere('sc.isActive = true')
            ->andWhere('c.isActive = true')
            // ->andWhere("p.is_active  = true")

            ->andWhere('s.isDeleted = false')
            ->setParameter('station', $station)
            ->orderBy('p.id', 'DESC');


        if ($search != "") {
            $q->andWhere('p.nom like :search')
                ->setParameter('search', '%' . $search . '%');
        }
        if ($categorie != "") {
            $q->andWhere('c.id = :categorie_id')
                ->setParameter('categorie_id', $categorie);
        }
        if ($souscategorie != "") {
            $q->andWhere('sc.id = :souscategorie_id')
                ->setParameter('souscategorie_id', $souscategorie);
        }

        return $q->getQuery()->getArrayResult();
    }

    public function getProduitSuperAdmin($station, $search, $categorie, $souscategorie)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,s,sc,c')
            //  ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")
            // ->where('p.station = :station')
            ->where('p.is_active  = false')
            ->where('p.pays IS NULL')
            //   ->where('c IS NOT NULL ')
            //  ->where('sc IS NOT NULL')
            ->andWhere('p.station IS NULL')

            //where

            //  ->andWhere('s.isDeleted = false')

            //   ->setParameter('station', $station)
            ->orderBy('p.id', 'DESC');

        /*  dump($station);
         dump( $q->getQuery()->getArrayResult());
         die();*/


        if ($search != "") {
            $q->andWhere('p.nom like :search')
                ->setParameter('search', '%' . $search . '%');
        }
        if ($categorie != "") {
            $q->andWhere('c.id = :categorie_id')
                ->setParameter('categorie_id', $categorie);
        }
        if ($souscategorie != "") {
            $q->andWhere('sc.id = :souscategorie_id')
                ->setParameter('souscategorie_id', $souscategorie);
        }


        return $q->getQuery()->getArrayResult();
    }

    public function getProduitActverInGestionnaire($station, $search, $categorie, $souscategorie, $pays)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,s,sc,c')
            ->leftJoin("p.pays", "py")
            ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            ->leftJoin("p.sous_categorie", "sc")

            // ->where('p.station = :station')
            // ->where('p.is_active  = false')
            ->where('p.pays  =:country')
            //   ->andWhere('c IS NOT NULL and sc IS NOT NULL')

            ->setParameter('country', $pays)
            ->andWhere('p.station IS NULL')


            //  ->andWhere("p.is_active  = true")

            //  ->andWhere('s.isDeleted = false')

            //   ->setParameter('station', $station)
            ->orderBy('p.id', 'DESC');

        /*  dump($station);
         dump( $q->getQuery()->getArrayResult());
         die();*/


        if ($search != "") {
            $q->andWhere('p.nom like :search')
                ->setParameter('search', '%' . $search . '%');
        }
        if ($categorie != "") {
            $q->andWhere('c.id = :categorie_id')
                ->setParameter('categorie_id', $categorie);
        }
        if ($souscategorie != "") {
            $q->andWhere('sc.id = :souscategorie_id')
                ->setParameter('souscategorie_id', $souscategorie);
        }


        return $q->getQuery()->getArrayResult();
    }


    public function getTopProduits($limit = 5, $station_id)
    {
        $q = $this->createQueryBuilder('p')
            //  ->select("p as produit, sub.image as sub_image,c as couleurs,s as sizes")
            ->select("p as produit")
            ->leftJoin("p.sous_categorie", "sub")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->andWhere("p.station = :station_id")
            ->andWhere("p.quantite > 0")
            ->setParameter("station_id", $station_id)
            ->setMaxResults(8)
            ->orderBy("p.nb_achat", 'DESC');


        $q = $q->getQuery();
        return $q->getResult();
    }

    public function getPromoProduits($limit, $station_id)
    {
        $q = $this->createQueryBuilder('p')
            // ->select("p as produit, sub.image as sub_image,c as couleurs,s as sizes")
            ->select("p as produit")
            ->leftJoin("p.sous_categorie", "sub")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->andWhere("p.station = :station_id")
            ->andWhere("p.is_promo = true and (p.prix_promo >0 OR  p.poucentage_promo>0 )")
            // ->andWhere("p.is_promo = true")
            ->andWhere("p.quantite > 0")
            ->setParameter("station_id", $station_id)
            ->setMaxResults(4)
            ->orderBy("p.poucentage_promo", 'DESC');


        $q = $q->getQuery();
        return $q->getResult();
    }

    public function getAllProducts($limit = 5, $station_id)
    {
        $q = $this->createQueryBuilder('p')
            ->select("p as produit, sub.image as sub_image,c as couleurs,s as sizes")
            ->leftJoin("p.sous_categorie", "sub")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->andWhere("p.station = :station_id")
            ->andWhere("p.quantite > 0")
            ->setParameter("station_id", $station_id)
            // ->setMaxResults(12)
            ->orderBy("p.nb_achat", 'DESC');


        $q = $q->getQuery();
        return $q->getResult();
    }

    public function getAllPromoProduits($station_id, $subcategorie_id = "")
    {
        $q = $this->createQueryBuilder('p')
            ->select("p as produit, sub.image as sub_image,c as couleurs,s as sizes")
            ->leftJoin("p.sous_categorie", "sub")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->andWhere("p.station = :station_id")
            //was  ->andWhere("p.is_promo = true")
            ->andWhere("p.is_promo = true and (p.prix_promo >0 OR  p.poucentage_promo>0 )")
            ->andWhere("p.quantite > 0")
            ->setParameter("station_id", $station_id);
        // ->setMaxResults(600)


        if ($subcategorie_id != "") {
            $q = $q->andWhere("p.sous_categorie_id = :sub_categorie_id")
                ->setParameter("sub_categorie_id", $subcategorie_id);
        }

        $q->orderBy("p.poucentage_promo", 'DESC');


        $q = $q->getQuery();
        return $q->getResult();
    }

    public function getAllProduits($station_id, $subcategorie_id = "")
    {
        $q = $this->createQueryBuilder('p')
            ->select("p as produit, sub.image as sub_image,c as couleurs,s as sizes")
            ->leftJoin("p.sous_categorie", "sub")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->andWhere("p.station = :station_id")
            //->andWhere("p.is_promo = true")
            ->andWhere("p.quantite > 0")
            ->setParameter("station_id", $station_id);


        if ($subcategorie_id != "") {
            $q = $q->andWhere("p.sous_categorie_id = :sub_categorie_id")
                ->setParameter("sub_categorie_id", $subcategorie_id);
        }


        $q->orderBy("p.poucentage_promo", 'DESC');


        $q = $q->getQuery();
        return $q->getResult();
    }

    public function getProduitsByIds($ids)
    {
        $str_ids = implode(", ", $ids);

        $q = $this->createQueryBuilder('p')
            ->addSelect('sub')
            ->leftJoin("p.sous_categorie", "sub")
            ->where("p.id in (:ids)")
            ->andWhere("p.is_active  = true")
            ->setParameter('ids', $ids);
        if ($str_ids != "")
            $q = $q->orderBy("field(p.id,$str_ids)");

        $q = $q->getQuery();

        return $q->getResult();
    }

    public function getProduitsFiltred($unite_id, $categorie_id, $min_price, $max_price, $sort, $keyword, $sub_categorie_id = "", $station_id = "")
    {


        $q = $this->createQueryBuilder('p')
            ->select("p,cat,sub,c,s")
           // ->where("p.is_active = 1")
         //   ->andWhere("p.quantite > 0")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.sous_categorie', "sub")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s");

        if ($categorie_id != "") {
            $q = $q->andWhere("p.categorie_id = :categorie_id")
                ->setParameter("categorie_id", $categorie_id);
        }
        if ($sub_categorie_id != "") {
            $q = $q->andWhere("p.sous_categorie_id = :sub_categorie_id")
                ->setParameter("sub_categorie_id", $sub_categorie_id);
        }
        if ($station_id != "") {
            $q = $q->andWhere("p.station = :station_id")
                ->setParameter("station_id", $station_id);
        }

        if ($max_price != "") {
            $q = $q->andWhere("p.prix <= :max_prix")
                ->setParameter("max_prix", $max_price);
        }

        if ($min_price != "") {
            $q = $q->andWhere("p.prix >= :min_prix")
                ->setParameter("min_prix", $min_price);
        }


        if ($keyword != "") {
            $q = $q->andWhere("p.nom LIKE :keyword")
                ->setParameter("keyword", "%" . $keyword . "%");
        }
        if ($sort != "") {
            $q = $q->orderBy("p." . $sort, "ASC");
        }
        $q = $q->getQuery();


//dump($q); die;
        return $q->getResult();
    }

    public function getProduitsWithoutsubcatgerorie($unite_id, $categorie_id, $min_price, $max_price, $sort, $keyword, $station_id = "")
    {


        $q = $this->createQueryBuilder('p')
            ->select("p,cat,sub,c,s")
            ->where("p.is_active = 1")
            ->andWhere("p.quantite > 0")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.sous_categorie', "sub")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s");


        if ($categorie_id != "") {
            $q = $q->andWhere("p.categorie_id = :categorie_id")
                ->setParameter("categorie_id", $categorie_id);
        }

        if ($station_id != "") {
            $q = $q->andWhere("p.station = :station_id")
                ->setParameter("station_id", $station_id);
        }

        if ($max_price != "") {
            $q = $q->andWhere("p.prix <= :max_prix")
                ->setParameter("max_prix", $max_price);
        }

        if ($min_price != "") {
            $q = $q->andWhere("p.prix >= :min_prix")
                ->setParameter("min_prix", $min_price);
        }


        if ($keyword != "") {

            $q = $q->andWhere("p.nom LIKE :keyword or p.nomen LIKE :keyword ")
                ->setParameter("keyword", "%" . $keyword . "%");


        }

        if ($sort != "") {
            $q = $q->orderBy("p." . $sort, "ASC");
        }
        $q = $q->getQuery();
        return $q->getResult();
    }


    public function getProductInstationById($station_id, $prod_id)
    {


        $q = $this->createQueryBuilder('p')
            ->select("p,cat,sub,c,s")
            ->where("p.id = :prod_id")
            ->setParameter("prod_id", $prod_id)
            ->andWhere("p.is_active = 1")
            ->andWhere("p.quantite > 0")
            ->andWhere("cat.isActive = true")
            ->andWhere("sub.isActive  = true")
            ->andWhere("p.is_active  = true")
            ->leftJoin("p.categorie", "cat")
            ->leftJoin('p.sous_categorie', "sub")
            ->leftJoin('p.couleurs', "c")
            ->leftJoin('c.sizes', "s")
        ;

        if ($station_id != "") {
            $q = $q->andWhere("p.station = :station_id")
                ->setParameter("station_id", $station_id);
        }


        $q = $q->getQuery()->getOneOrNullResult();
        return $q;


    }

    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('u')
            ->Select('u')
            ->Where('u.id IN (:array)')
            ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }

    public function nombreProduit()
    {
        $qb = $this->createQueryBuilder('p')
            ->Select('COUNT(p)')
            ->where('p.is_active = true');
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * @return Query
     */
    public function queryBProduits()
    {
        return $this->getEntityManager()
            ->createQuery('
                SELECT p
                FROM WebBundle:Produits p
                ORDER BY p.created_at DESC
            ');
    }

    public function getAllProduitByPays($pays)
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,s,py')
            ->leftJoin("p.pays", "py")
            //  ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            //  ->leftJoin("p.sous_categorie", "sc")
            ->where('p.pays = :pays')
            //  ->andWhere('sc.isActive = true')
            //  ->andWhere('c.isActive = true')
            //  ->andWhere("p.is_active  = true")
            //   ->andWhere('s.isDeleted = false')
            ->setParameter('pays', $pays)
            ->orderBy('p.id', 'DESC');


        return $q->getQuery()->getArrayResult();
    }


    public function getProduitByPaysByParent($parentId, $pays)
    {
        $q = $this->createQueryBuilder('p')
            //->select('p,s,py')
            ->select('p,py')
            ->leftJoin("p.pays", "py")
            // ->leftJoin("p.station", "s")
            ->where('p.pays = :pays')
            ->setParameter('pays', $pays)
            ->andWhere('p.parent_id = :parentid')
            ->setParameter("parentid", $parentId)
            ->orderBy('p.id', 'DESC');


        return $q->getQuery()->getResult();
    }

    public function getAllProduitSUPByPays()
    {
        $q = $this->createQueryBuilder('p')
            ->select('p,s,py')
            ->leftJoin("p.pays", "py")
            //  ->leftJoin("p.categorie", "c")
            ->leftJoin("p.station", "s")
            //  ->leftJoin("p.sous_categorie", "sc")
            ->where('p.pays IS NULL')
            //  ->andWhere('sc.isActive = true')
            //  ->andWhere('c.isActive = true')
            //  ->andWhere("p.is_active  = true")
            //   ->andWhere('s.isDeleted = false')
            //  ->setParameter('pays', $pays)
            ->orderBy('p.id', 'DESC');


        return $q->getQuery()->getArrayResult();
    }

}
