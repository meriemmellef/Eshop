<?php

namespace WebBundle\Repository;

/**
 * CategoriesRepository
 *
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoriesRepository extends \Doctrine\ORM\EntityRepository
{
    public function getCategorieByPaysAll($pays,$search)
    {
        $q=$this->createQueryBuilder('c')
            ->select('c,p')
            ->leftJoin("c.pays", "p")
            ->where('c.pays = :pays')
            //->andWhere('c.isActive = true')
            ->setParameter('pays', $pays)
            ->orderBy('c.id','DESC');

        if($search !=""){
            $q  ->andWhere('c.nom like :search OR c.nom_en like :search')
                ->setParameter('search', '%'.$search.'%');

        }

        return $q->getQuery()->getArrayResult();

    }

    public function getCategorieByPays($pays,$search)
    {
        $q=$this->createQueryBuilder('c')
            ->select('c,p')
            ->leftJoin("c.pays", "p")
            ->where('c.pays = :pays')
            ->andWhere('c.isActive = true')
            ->setParameter('pays', $pays)
            ->orderBy('c.id','DESC');

        if($search !=""){
            $q  ->andWhere('c.nom like :search OR c.nom_en like :search')
                ->setParameter('search', '%'.$search.'%');

        }

        return $q->getQuery()->getArrayResult();

    }

    public function getCategoriePaysAndSuper($pays,$search)
    {
        $q=$this->createQueryBuilder('c')
            ->select('c,p')
            ->leftJoin("c.pays", "p")
            ->where('c.pays = :pays OR c.pays IS NULL ')
            ->andWhere('c.isActive = true')
            ->setParameter('pays', $pays)
            ->orderBy('c.id','DESC');

        if($search !=""){
            $q  ->andWhere('c.nom like :search OR c.nom_en like :search')
                ->setParameter('search', '%'.$search.'%');

        }

        return $q->getQuery()->getArrayResult();

    }

    public function getCategorieAdminAll($search)
    {
        $q=$this->createQueryBuilder('c')
            ->select('c,p')
            ->leftJoin("c.pays", "p")
            ->where('c.pays IS NULL')
            //->andWhere('c.isActive = true')
            //  ->setParameter('pays', $pays)
            ->orderBy('c.id','DESC');

        //    dump($q->getQuery()->getArrayResult());die();

        if($search !=""){
            $q  ->andWhere('c.nom like :search OR c.nom_en like :search')
                ->setParameter('search', '%'.$search.'%');

        }
//dump($search);die();
        return $q->getQuery()->getArrayResult();

    }

    public function getCategorieAdmin($search)
    {
        $q=$this->createQueryBuilder('c')
            ->select('c,p')

            ->leftJoin("c.pays", "p")
            ->where('c.pays IS NULL')
            ->andWhere('c.isActive = true')
          //  ->setParameter('pays', $pays)
            ->orderBy('c.id','DESC');

    //    dump($q->getQuery()->getArrayResult());die();

        if($search !=""){
            $q  ->andWhere('c.nom like :search OR c.nom_en like :search')
                ->setParameter('search', '%'.$search.'%');

        }
//dump($search);die();
        return $q->getQuery()->getArrayResult();

    }

    public function getAllCategories($code_pays,$station)
    {
        $q=$this->createQueryBuilder('c')
            ->addSelect("sub")
            ->leftJoin("c.sous_categories", "sub")
            ->leftJoin("c.pays", "p")
            ->leftJoin("c.produits", "pr")
            ->leftJoin("sub.produits", "subpr")
            ->leftJoin("pr.station", "s")
            ->where('p.code = :pays')
            ->andWhere(' pr.sous_categorie = sub and c.isActive = true and sub.isActive = true  and  pr.is_active = true ')
            ->andWhere('pr.quantite > 0')
            ->groupBy('sub')
             ->having('count(subpr) > 0')
            ->orderBy('c.createdAt')
            ->setParameter('pays', $code_pays);

        if( $station != ''){
            $q ->andWhere('s.id = :station_id')
                ->setParameter('station_id',$station);
        }
        return $q->getQuery()->getResult();

    }
    public function  getCategoriesbyStation($code_pays,$station){
        $sql ='  SELECT c,sub
                     FROM  WebBundle:Categories c,   WebBundle:Produits pr , WebBundle:SousCategories sub
                     LEFT JOIN pr.pays p
                     LEFT JOIN pr.station s
                     WHERE pr.categorie = c  and pr.sous_categorie = sub  and  p.id = 3  and c.isActive = true and  pr.is_active = true 
                     GROUP BY c
                ';
    /*    if( $station != ''){
            $sql = $sql + 'and  s.id = :station';
        }*/


        $categories =$this->getEntityManager()
            ->createQuery($sql)
        //    ->setParameter('pays', $code_pays)
      //  $categories
          //  ->setParameter('station',$station)
            ->getResult();

        /*  $q=$this->createQueryBuilder('c')
              ->select("c,COUNT(pr) AS number_of_products")
              ->leftJoin("c.sous_categories", "sub")
              ->leftJoin("c.pays", "p")
              ->leftJoin("c.produits", "pr", 'WITH', "pr.categorie = c")
              ->leftJoin("pr.station", "s")
              ->where('p.code = :pays')
              ->andWhere('c.isActive = true')
              ->andWhere('pr.is_active = true')
              ->groupBy('c')
              ->setParameter('pays', $code_pays);
          if($station != ""){
              $q ->andWhere('s.id = :station_id')
                  ->setParameter('station_id',$station);
          }*/
        return $categories;
    }
}
