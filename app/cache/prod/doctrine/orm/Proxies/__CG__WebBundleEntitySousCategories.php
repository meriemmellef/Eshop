<?php

namespace Proxies\__CG__\WebBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class SousCategories extends \WebBundle\Entity\SousCategories implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'id', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'categorie_id', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'nom', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'nom_en', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'pays', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'categorie', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'produits', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'createdAt', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'updatedAt', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'image', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'isActive', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'parent_id'];
        }

        return ['__isInitialized__', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'id', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'categorie_id', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'nom', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'nom_en', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'pays', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'categorie', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'produits', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'createdAt', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'updatedAt', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'image', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'isActive', '' . "\0" . 'WebBundle\\Entity\\SousCategories' . "\0" . 'parent_id'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (SousCategories $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setNom($nom)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNom', [$nom]);

        return parent::setNom($nom);
    }

    /**
     * {@inheritDoc}
     */
    public function getNom()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNom', []);

        return parent::getNom();
    }

    /**
     * {@inheritDoc}
     */
    public function getPays()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPays', []);

        return parent::getPays();
    }

    /**
     * {@inheritDoc}
     */
    public function setPays(\WebBundle\Entity\Pays $pays)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPays', [$pays]);

        return parent::setPays($pays);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorie', []);

        return parent::getCategorie();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorie(\WebBundle\Entity\Categories $categorie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorie', [$categorie]);

        return parent::setCategorie($categorie);
    }

    /**
     * {@inheritDoc}
     */
    public function getProduits()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProduits', []);

        return parent::getProduits();
    }

    /**
     * {@inheritDoc}
     */
    public function addProduit(\WebBundle\Entity\Produits $produit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addProduit', [$produit]);

        return parent::addProduit($produit);
    }

    /**
     * {@inheritDoc}
     */
    public function removeProduit(\WebBundle\Entity\Produits $produit)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeProduit', [$produit]);

        return parent::removeProduit($produit);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsActive', []);

        return parent::getIsActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsActive($isActive)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsActive', [$isActive]);

        return parent::setIsActive($isActive);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategorieId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategorieId', []);

        return parent::getCategorieId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategorieId($categorie_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategorieId', [$categorie_id]);

        return parent::setCategorieId($categorie_id);
    }

    /**
     * {@inheritDoc}
     */
    public function setNomEn($nom_en)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNomEn', [$nom_en]);

        return parent::setNomEn($nom_en);
    }

    /**
     * {@inheritDoc}
     */
    public function getNomEn()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNomEn', []);

        return parent::getNomEn();
    }

    /**
     * {@inheritDoc}
     */
    public function getParentId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParentId', []);

        return parent::getParentId();
    }

    /**
     * {@inheritDoc}
     */
    public function setParentId($parent_id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParentId', [$parent_id]);

        return parent::setParentId($parent_id);
    }

}
